worker_processes 1; 

error_log logs/error.log; 

events {
    worker_connections 1024;
}





http {
    lua_shared_dict cache 1m;
    upstream backend {
        # least_conn; # 最少连接负载
        server 192.168.0.2:8080;
        server 192.168.0.3:8080; 
        balancer_by_lua_file lua/balancer.lua; # 使用lua写的自定义的balancer
    }
    server {
        listen 8081; 
        server_name 127.0.0.1; 

        location / {
            proxy_pass http://backend;
        }
    }

    lua_shared_dict healthcheck 1m; 
    lua_socket_log_errors off; 
    init_worker_by_lua_block {
        local hc = require "resty.upstream.healthcheck"
        local ok, err = hc.spawn_checker{
            shm = "healthcheck",  -- defined by "lua_shared_dict"
            upstream = "backend", -- defined by "upstream"
            type = "http",

            http_req = "GET / HTTP/1.0\r\nHost: localhost\r\n\r\n",
                    -- raw HTTP request for checking

            interval = 2000,  -- run the check cycle every 2 sec
            timeout = 1000,   -- 1 sec is the timeout for network operations
            fall = 3,  -- # of successive failures before turning a peer down
            rise = 2,  -- # of successive successes before turning a peer up
            valid_statuses = {200, 302},  -- a list valid HTTP status code
            concurrency = 10,  -- concurrency level for test requests
        }
        if not ok then
            ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
            return
        end
    }
}